{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git-repo\\\\React\\\\react-project-1\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nfunction App() {\n  _s();\n  const [counter, setValue] = useState(0);\n  const [keyword, setKeyword] = useState(\"\");\n  const onClick = () => setValue(prev => prev + 1);\n  const onChange = event => setKeyword(event.target.value);\n  // 1. console.log('I run all the time');  {/* component가 render 될 때 */}\n  useEffect(() => {\n    // 1. console.log(\"CALL THE API....\");\n    // 2.\n    console.log(\"I run only once.\");\n  }, []);\n  {/* [] 안에는 react.js 가 무엇을 지켜볼지 작성해준다. */}\n  useEffect(() => {\n    // 1. console.log(\"SEARCH FOR\", keyword);\n    // 2. if(keyword !== \"\" && keyword.length > 5){\n    //   console.log(\"SEARCH FOR\", keyword);\n    // };\n    // 3.\n    console.log(\"I run when 'keyword' changes.\");\n  }, [keyword]);\n  {/* keyword 가 변화할 때만 코드를 실행할 거라고 react.js 에게 알려주는 것 */}\n  useEffect(() => {\n    console.log(\"I run when 'counter' changes.\");\n  }, [counter]);\n  useEffect(() => {\n    console.log(\"I run when 'keyword & counter' changes.\");\n  }, [keyword, counter]);\n  {/* OR 의 개념으로 keyword 혹은 counter 가 변경될 때 실행 */}\n  useEffect(function () {\n    console.log('test');\n  }, [keyword]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: keyword,\n    onChange: onChange,\n    type: \"text\",\n    placeholder: \"Search here....\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, counter), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"click me\"));\n}\n_s(App, \"5B7NSdNwOMuu55iZyvn6Jdfza1I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","App","_s","counter","setValue","keyword","setKeyword","onClick","prev","onChange","event","target","value","console","log","React","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Git-repo/React/react-project-1/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nfunction App() {\r\n  const [counter, setValue] = useState(0);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const onClick = () => setValue((prev) => prev + 1);\r\n  const onChange = (event) => setKeyword(event.target.value);\r\n  // 1. console.log('I run all the time');  {/* component가 render 될 때 */}\r\n  useEffect(() => {\r\n    // 1. console.log(\"CALL THE API....\");\r\n    // 2.\r\n    console.log(\"I run only once.\");\r\n  }, []); {/* [] 안에는 react.js 가 무엇을 지켜볼지 작성해준다. */}\r\n  useEffect(() => {\r\n    // 1. console.log(\"SEARCH FOR\", keyword);\r\n    // 2. if(keyword !== \"\" && keyword.length > 5){\r\n    //   console.log(\"SEARCH FOR\", keyword);\r\n    // };\r\n    // 3.\r\n    console.log(\"I run when 'keyword' changes.\");\r\n  }, [keyword]);  {/* keyword 가 변화할 때만 코드를 실행할 거라고 react.js 에게 알려주는 것 */}\r\n  useEffect(() => {\r\n    console.log(\"I run when 'counter' changes.\");\r\n  }, [counter]);\r\n  useEffect(() => {\r\n    console.log(\"I run when 'keyword & counter' changes.\");\r\n  }, [keyword, counter]); {/* OR 의 개념으로 keyword 혹은 counter 가 변경될 때 실행 */}\r\n  useEffect(function(){\r\n    console.log('test');\r\n  }, [keyword]);\r\n  return (\r\n    <div>\r\n      <input \r\n        value={keyword} \r\n        onChange={onChange} \r\n        type=\"text\" \r\n        placeholder=\"Search here....\"\r\n      />\r\n      <h1>{counter}</h1>\r\n      <button onClick={onClick}>click me</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMO,OAAO,GAAGA,CAAA,KAAMH,QAAQ,CAAEI,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;EAClD,MAAMC,QAAQ,GAAIC,KAAK,IAAKJ,UAAU,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1D;EACAb,SAAS,CAAC,MAAM;IACd;IACA;IACAc,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EAAE,CAAC;EACTf,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA;IACA;IACAc,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC9C,CAAC,EAAE,CAACT,OAAO,CAAC,CAAC;EAAG,CAAC;EACjBN,SAAS,CAAC,MAAM;IACdc,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC9C,CAAC,EAAE,CAACX,OAAO,CAAC,CAAC;EACbJ,SAAS,CAAC,MAAM;IACdc,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;EACxD,CAAC,EAAE,CAACT,OAAO,EAAEF,OAAO,CAAC,CAAC;EAAE,CAAC;EACzBJ,SAAS,CAAC,YAAU;IAClBc,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EACrB,CAAC,EAAE,CAACT,OAAO,CAAC,CAAC;EACb,oBACEU,KAAA,CAAAC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEP,KAAA,CAAAC,aAAA;IACEJ,KAAK,EAAEP,OAAQ;IACfI,QAAQ,EAAEA,QAAS;IACnBc,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC,iBAAiB;IAAAP,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC9B,CAAC,eACFP,KAAA,CAAAC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAKnB,OAAY,CAAC,eAClBY,KAAA,CAAAC,aAAA;IAAQT,OAAO,EAAEA,OAAQ;IAAAU,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UAAgB,CACvC,CAAC;AAEV;AAACpB,EAAA,CAxCQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AA0CZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}