1. mock.json 파일 생성(내용 추가, 이미지 인터넷에서 따오기)
2. components 폴더 생성
3. ReviewList.js 생성
4. App.js 생성
5. map으로 배열 렌더링하기
 5.1 ReviewList.js 에 ReviewListItem 컴포넌트 생성
 5.2 ReviewList.css 생성하고 내용 작성
6. sort로 정렬 바꾸기
7. filter로 아이템 삭제하기
 * filter 는 걸러내고 새로운 배열을 반환, find 는 찾으면 바로 반복 종료하고 배열이 아닌 값으로 반환
8. 배열을 렌더링할 땐 key를 기억해라
 8.1 key 가 없는 상태에서 input 생성하고 화면의 두번째 input에 텍스트를 입력하고
     첫번째 요소를 삭제하면 엉뚱한 곳에 텍스트가 남아있음.(배열의 인덱스는 key 로 사용할 수 없음)
9. key 를 써야하는 이유
 ['사과', '망고', '포도'] 에서 ['사과', '포도']가 되면 배열의 망고를 삭제했다 라고 생각한다.
 그런데 다르게 생각하면 포도를 삭제하고 두번째 망고를 포도로 바꿨을 수도 있다.
 즉, 어떻게 바뀐건지 결과만 봐서는 알 수 없음.
 [
    {key: 1, '사과'},
    {key: 2, '망고'},
    {key: 3, '포도'},
 ]
 [
    {key: 1, '사과'},
    {key: 3, '포도'},
 ]
 이렇게 있다면 결과만 보고도 어떻게 바뀐것인지 알 수 있음.
 배열의 변화를 리액트에 정확하게 전달하려면 key를 고유한 값으로 전달해야 한다.
10. 리액트에서 fetch 사용하기(api.js 생성)
 App.js 에서 mockjson 을 삭제
11. 버튼클릭할 때 말고 페이지 로딩되자마자 데이터 가져올 수 있도록 변경(useEffect 사용)
 handleLoadClick ==> handleLoad 로 변경
12. 서버에서 정렬한 데이터 받아오기
 정렬하는 버튼을 누르면 받아온 데이터 안에서만 정렬된다.
 이런경우는 서버에서 정렬된 데이터를 받아와야 한다.
13. 페이지네이션
 오프셋, 커서 기반 페이지네이션 두가지가 있다.
 오프셋 = 상쇄하다 = 지금까지 받아온 데이터의 개수
 커서 = 데이터를 가리키는 값 = 지금까지 받은 데이터를 표시한 책갈피
 api.js 수정하고 App.js 수정
14. 비동기로 State를 변경할 때 주의할 점
 더보기 버튼을 누르고 삭제를 빠르게 눌러본다.
15. 네트워크 로딩 처리하기
 개발자도구의 네트워크 탭에서 Slow 3G로 바꾼 후 더보기 버튼을 빠르게 클릭 해본다.
 ==> 불필요한 중복된 요청이 생길 수 있다.
 App.js 에 isLoading State 생성. button 태그의 disabled prop에 isLoading 으로 변경
16. 네트워크 에러 처리하기
17. 입력폼 만들기
 ReviewForm.js 생성. App.js 에 ReviewForm 컴포넌트 추가
18. ReviewForm.css 생성
19. ReviewForm.js 에 확인 버튼 추가
20. 하나의 State로 폼 구현하기
21. 제어 컴포넌트와 비제어 컴포넌트
 input 태그에서 onChange 로 리액트 state와 값을 input 값과 동일하게 맞추고 있는데
 이런 방식을 제어 컴포넌트라고 부른다. 리액트를 통해서 input 값을 제어하고 있기 때문.
 제어하지 않는 컴포넌트는 비제어 컴포넌트 라고 한다.
22. FileInput.js 생성
 * 파일 input 은 반드시 비제어 input 으로 만들어야 한다.
23. ref로 DOM노드 가져오기
 원하는 시점에 실제 DOM노드에 접근하고 싶을 때 사용할 수 있는 prop이다.
24. 이미지 파일 미리보기
25. 별점 컴포넌트 만들기(Rating.js 생성)
26. 별점 인풋 만들기
 Rating.js 에서 Rating 과 Star 컴포넌트 수정
 RatingInput.js 생성
27. 글 작성하기
 파이어베이스 스토리지 생성(파이어베이스에 접속해서 스토리지 생성)
 * cors 오류는 https://console.cloud.google.com/ 접속해서 cors.json 파일 생성하고 명령어 입력
   gsutil cors set cors.json gs:스토리지주소
28. 글 수정하기 1
 28.1. 수정버튼을 눌렀을 때 입력폼을 보여주는것 부터 작성 
 - 핵심은 ReviewList 컴포넌트에서 현재 수정중인 요소를 기억해두고 렌더링 할때는 해당하는 요소만 입력폼으로 렌더링 하는것.
 ReviewList 컴포넌트에 editingId 라는 state를 만들어 준다. 
 item 의 id 가 editingId 와 같을 경우에만 ReviewForm 을 렌더링 해준다.
 ReviewListItem 에 onEdit 이라는 prop 으로 setEditingId 를 넘겨주고 ReviewListItem 에서 onEdit 을 추가해준다음에
 handleEditClick 함수를 만들어서 onEdit(item.id) 를 실행해준다.
 
 28.2. 수정 버튼을 눌렀을 때 리뷰를 수정할 때 입력폼에 값이 들어있어야 하니까 ReviewForm 컴포넌트에 initialValues prop 을 추가해준다.
 기존에 INITIAL_VALUES 가 들어있던 useState 에 이 initialValues 를 주고 위에서 추가한 initialValues prop 의 기본값으로 INITIAL_VALUES 를 넣어준다.
 수정하는 경우에 취소버튼이 필요하니 onCancel 이라는 prop 도 추가하고 취소버튼을 추가한 다음에 onCancel 이 있을때만 보이도록 해준다.
 그리고 나서 ReviewList 컴포넌트에서는 initialValues 값을 만들어서 내려준다.
 handleCancel 이라는 함수를 만들어서 EditingId 를 null 로 변경해준다. 이 함수는 onCancel prop 으로 내려준다.
 
 수정할 때 이미지 미리보기는 imgUrl 이라는 prop 만 있기 때문ㅇㅔ imgUrl 을 추가로 구조분해할당하고 ReviewForm 컴포넌트에 initialPreview 라는 prop 으로 내려준다.
 그리고 ReviewForm 컴포넌트에서는 initialPreview 라는 prop 을 받아서 그대로 FileInput 컴포넌트에 내려준다.
 그리고 FileInput 컴포넌트에 가서 initialPreview 라는 prop 를 추가하고 preview state 의 초기값으로 넣어준다.
 마찬가지로 preview를 초기화하는 부분도 initialPreview 를 넣어준다.(setPreview 함수에)

 initialPreview 라는 값이 바뀌면 useEffect의 실행도 달라져야 하므로 디펜던시리스트에 넣어준다.
29. 글 수정하기 2
 29.1. 수정 api(firebase 함수 변경)
 똑같은 입력폼을 사용하기 때문에 ReviewForm 컴포넌트 에서는 수정하는 상황인지 작성하는 상황인지 알 수 없다.
 대신 상위 컴포넌트인 ReviewList 에서는 어떤 상황에서 쓰이는지 알 수 있다.
 ReviewForm 컴포넌트에 가서 onSubmit 이라는 prop 을 추가한다. 이 prop 을 사용해서 기존에 사용하던 addDatas 를 대신해준다.
 firebase.js 에서 addDatas 함수를 수정해준다.
 App 컴포넌트를 보면 글을 불러오고 생성하는것 모두 해주고 있다. 마찬가지로 수정하는것도 values 가 있는 App 컴포넌트에서 한다.

 handleUpdateSuccess 함수를 만들어서 리뷰를 수정한 다음에 데이터를 반영한다. 
 items state를 변경하는데 수정할 item에 해당하는 인덱스를 찾은 다음에 같은 id를 가진 item 을 찾아서 갈아끼워준다.
 그리고 ReviewList 컴포넌트에 onUpdate prop 으로 updateReview 함수를, onUpdateSuccess prop 에 handleUpdateSuccess 함수를 내려준다.
 ReviewList 컴포넌트에서 prop 들을 추가해주고 handleSubmit 함수를 만들어준다.
 handleSubmitSuccess 함수에서는 파라미터로 받은 review 를 onUpdateSuccess 에 넘겨주고 입력폼을 닫아주기 위해서 editingId state 를 null 로 바꿔준다.
 그리고 ReviewForm 컴포넌트의 prop 으로 onSubmit 과 onSubmitSuccess 을 넘겨준다.
30. 글 삭제하기
31. 리액트 Hook. Hook은 어딘가에 걸어놓을 수 있는 고리를 뜻함.
 내 코드를 다른 프로그램에 연결해 놓으면 그 프로그램이 나중에 내 코드를 실행하도록 만드는걸 말한다.
 useState : State는 컴포넌트 안에 있는 값이 아니라 리액트가 따로 관리하는 값이다.
            즉 리액트의 State 라는 기능에 연결해서 변수처럼 값을 사용하는 것이다.
 useEffect : 내 콜백 함수를 리액트에 연결해서 렌더링 후에 함수 실행(리액트에 연결해 놓고 렌더링 이후에 실행하도록 할 수 있다.)
 useRef : 객체를 만들 때 사용. 리액트가 관리하는 Ref 객체레 연결해서 current 값을 사용.
32. 리액트 Hook의 규칙
 확인해보기 위해 Rating.js 파일을 수정하면서 확인해보자.
 1. 커스텀 Hook 함수 안에서 실행되어야 한다.
 2. 반드시 함수의 최상위에서 실행해야 한다. => 쉽게말해 반복문이나 조건문 안에서 쓰면 안된다는 뜻이다.
    개발자도구에서 리액트 Components 를 살펴보면 State 들을 확인할 수 있는데 State 라고만 나와있다. Hook을 실행할 때 이름을 정하는게 아니기 때문에
    Hook이 실행된 순서를 통해서 기억한다. 그래서 여러 State 를 쓰게 되면 이런 식으로 실행한 순서대로 값을 연결해 두는 것이다.
33. 나만의 Hook 으로 코드 정리하기
 33.1. components 폴더안에 hooks 폴더 생성 후 안에 useAsync.js 생성
 33.2. App2.js 만들어서 코드 수정(useAsync 사용)
34. useCallback 
 App.js 의 useEffect 의 디펜던시 리스트에 handleLoad 함수를 추가해야 콘솔창의 오류가 없어진다.(오류 안생기면 넘어가)
 설명 할 때 코드잇 강의 React로 데이터 다루기 - 4. 데이터 보내기 - 13. 빠짐없는 디펜던시(exhaustive-deps) 참조
35. Context(context_설명참조.png 참고)
 프로젝트의 규모가 커지면 이것만으로 다루기 힘든 경우가 있다. 이럴 때 사용하는것이 Context 이다.
 언어를 바꿔주는 기능을 만든다고 가정하고 변수를 내려줄 때 여러 컴포넌트를 거쳐야 하는 경우에 사용한다.
 보통 전역데이터를 다룰 때 사용.(props와 state를 사용하여 내려주면 여러번, 여러곳에 내려줘야 한다는 문제점이 있다.)
 Prop drilling 문제점 발생 =>  드릴로 땅을 파듯이 상위 컴포넌트에서 하위 컴포넌트로 반복해서 prop를 내려주는 상황

 그런데 여기저기서 데이터를 바꿔버리면 안되니 적절하게 사용해야 한다.

 contexts 라는 폴더를 만들고 LocaleContext.js 생성
 App로 가서 최상위 태그로 LocaleContext의 Provider 라는 컴포넌트로 감싸준다.
 이렇게 하면 그 안에 있는 컴포넌트에서는 어디서나 LocaleContext 가 제공하는 값을 쓸 수 있다.
 Provider 의 value prop 으로 공유할 데이터를 지정해 주면 된다.
36. Context 값에 State 사용하기
 App.js 에 locale State 생성
37. Context 코드 분리하기
 SomeComponent 가 생성되면 코드를 수정할 때 헷갈릴 수 있다. 그래서 State와 Context Provider 를 함께 사용한다.
 매번 useContext랑 LocaleContext 를 가지고 사용하는건 번거로우니까 이걸 대신해주는걸 만들어준다.
 useLocale 이라는 Hook은 locale 값을 전달해주고, useSetLocale 이라는 Hook 은 setLocale 함수를 전달해주도록 한다.
 이렇게 하면 어디서 값을 사용하고 변경하는지 알기 편하다.

 일단 함수 안에서 Context 값을 가져온다. 이 커스텀 훅을 LocaleContext.Provider 바깥에서 사용하면 context 값이 없다.
 그런 경우에는 error 를 throw 해준다. 커스텀 훅을 사용하면 이렇게 error 처리를 해줄 수 있다는 장점이 있다.

 마지막에 export default LocaleContext 는 지워준다.(함수마다 export 붙이고나서)

 소스 적용 - ReviewList 에서 useContext 사용하던걸 useLocale 훅으로 바꿔준다.
             LocaleSelect 에서는 value와 onChange prop 받아오던걸 useLocale과 useSetLocale 훅으로 받아온다.
38. 다국어 기능 완성하기
 사전 즉, Dictionary 구조를 사용한다.(그냥 객체와 똑같다.)
 hooks 폴더에 useTranslate.js 생성
 useLocale 커스텀 훅으로 locale 값을 가져온다.
 dict 라는 객체를 만들고 언어마다 필요한 단어를 작성해준다.

 useTranslate 라는 함수를 만들고 dict 에서 필요한 값을 뽑아온다.
 마지막에는 translate 함수를 리턴해준다.

 소스 적용 - ReviewListItem 컴포넌트로 가서 적용.
             useTranslate 훅으로 translate 함수를 가져오고 각 단어에 필요한 키값으로 변경해준다.
             ReviewForm 컴포넌트에도 적용한다.


 

 
