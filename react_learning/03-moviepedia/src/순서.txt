1. mock.json 파일 생성(내용 추가, 이미지 인터넷에서 따오기)
2. components 폴더 생성
3. ReviewList.js 생성
4. App.js 생성
5. map으로 배열 렌더링하기
 5.1 ReviewList.js 에 ReviewListItem 컴포넌트 생성
 5.2 ReviewList.css 생성하고 내용 작성
6. sort로 정렬 바꾸기
7. filter로 아이템 삭제하기
 * filter 는 걸러내고 새로운 배열을 반환, find 는 찾으면 바로 반복 종료하고 배열이 아닌 값으로 반환
8. 배열을 렌더링할 땐 key를 기억해라
 8.1 key 가 없는 상태에서 input 생성하고 화면의 두번째 input에 텍스트를 입력하고
     첫번째 요소를 삭제하면 엉뚱한 곳에 텍스트가 남아있음.(배열의 인덱스는 key 로 사용할 수 없음)
9. key 를 써야하는 이유
 ['사과', '망고', '포도'] 에서 ['사과', '포도']가 되면 배열의 망고를 삭제했다 라고 생각한다.
 그런데 다르게 생각하면 포도를 삭제하고 두번째 망고를 포도로 바꿨을 수도 있다.
 즉, 어떻게 바뀐건지 결과만 봐서는 알 수 없음.
 [
    {key: 1, '사과'},
    {key: 2, '망고'},
    {key: 3, '포도'},
 ]
 [
    {key: 1, '사과'},
    {key: 3, '포도'},
 ]
 이렇게 있다면 결과만 보고도 어떻게 바뀐것인지 알 수 있음.
 배열의 변화를 리액트에 정확하게 전달하려면 key를 고유한 값으로 전달해야 한다.
10. 리액트에서 fetch 사용하기(api.js 생성)
 App.js 에서 mockjson 을 삭제
11. 버튼클릭할 때 말고 페이지 로딩되자마자 데이터 가져올 수 있도록 변경(useEffect 사용)
 handleLoadClick ==> handleLoad 로 변경
12. 서버에서 정렬한 데이터 받아오기
 정렬하는 버튼을 누르면 받아온 데이터 안에서만 정렬된다.
 이런경우는 서버에서 정렬된 데이터를 받아와야 한다.
13. 페이지네이션
 오프셋, 커서 기반 페이지네이션 두가지가 있다.
 오프셋 = 상쇄하다 = 지금까지 받아온 데이터의 개수
 커서 = 데이터를 가리키는 값 = 지금까지 받은 데이터를 표시한 책갈피
 api.js 수정하고 App.js 수정
14. 비동기로 State를 변경할 때 주의할 점
 더보기 버튼을 누르고 삭제를 빠르게 눌러본다.
15. 네트워크 로딩 처리하기
 개발자도구의 네트워크 탭에서 Slow 3G로 바꾼 후 더보기 버튼을 빠르게 클릭 해본다.
 ==> 불필요한 중복된 요청이 생길 수 있다.
 App.js 에 isLoading State 생성. button 태그의 disabled prop에 isLoading 으로 변경
16. 네트워크 에러 처리하기
17. 입력폼 만들기
 ReviewForm.js 생성. App.js 에 ReviewForm 컴포넌트 추가
18. ReviewForm.css 생성
19. ReviewForm.js 에 확인 버튼 추가
20. 하나의 State로 폼 구현하기
21. 제어 컴포넌트와 비제어 컴포넌트
 input 태그에서 onChange 로 리액트 state와 값을 input 값과 동일하게 맞추고 있는데
 이런 방식을 제어 컴포넌트라고 부른다. 리액트를 통해서 input 값을 제어하고 있기 때문.
 제어하지 않는 컴포넌트는 비제어 컴포넌트 라고 한다.
22. FileInput.js 생성
 * 파일 input 은 반드시 비제어 input 으로 만들어야 한다.
23. ref로 DOM노드 가져오기
 원하는 시점에 실제 DOM노드에 접근하고 싶을 때 사용할 수 있는 prop이다.
24. 이미지 파일 미리보기
25. 별점 컴포넌트 만들기(Rating.js 생성)
26. 별점 인풋 만들기
 Rating.js 에서 Rating 과 Star 컴포넌트 수정
 RatingInput.js 생성

 
